/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.table.DefaultTableModel;
import p5_negocio.entidades.Usuario;
import p6_excecoes.BancoDeDadosException;

/**
 *
 * @author o
 */
public class JPanelUsuariosListar extends javax.swing.JPanel {

    /**
     * Creates new form JPanelUsuariosListar
     */
    TelasProjetoFinalPrincipal telaprincipal;
    JOptionPaneGui exibe;
    DefaultTableModel modeljTable_Usuario;

    public JPanelUsuariosListar(TelasProjetoFinalPrincipal telaprincipal) {
        initComponents();
        this.telaprincipal = telaprincipal;
        exibe = new JOptionPaneGui();
        modeljTable_Usuario = (DefaultTableModel) this.jTable_Usuario.getModel();
        showUsuarios();
    }

    private void showUsuarios() {

        ArrayList<Usuario> usuarios;
        try {

            usuarios = telaprincipal.getFachada().listarUsuarios();
            for (int i = 0; i < usuarios.size(); i++) {
                Usuario pj = (Usuario) usuarios.get(i);
                modeljTable_Usuario.addRow(
                        new Object[]{
                            Integer.valueOf(
                                    pj.getId()
                            ), pj.getLogin()
                        }
                );
            }
        } catch (BancoDeDadosException ex) {
            Logger.getLogger(JPanelUsuariosListar.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTable_Usuarios_PopupMenu();
    }

    private void jTable_Usuarios_PopupMenu() {
        final JPopupMenu popupMenu = new JPopupMenu();

        // cria item de menu com nome editar
        JMenuItem editItem = new JMenuItem("Mudar senha");
        // atribui a editar um evento
        editItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // editar ira usar o evento que e stiver listado aqui, no caso a funcao jTable_UsuarioEditar
                JPanelUsuariosListar.this.jTable_UsuarioMudarSenha();
            }
        });
        popupMenu.add(editItem);

        JMenuItem deleteItem = new JMenuItem("Deletar");
        deleteItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JPanelUsuariosListar.this.JPanelUsuariosListarDeletar();
            }
        });
        popupMenu.add(deleteItem);

        // parte responsavel para que o clique com o botao direito do mause selecione a linha onde o clique ocorreu
        popupMenu.addPopupMenuListener(new PopupMenuListener() {
            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        int rowAtPoint = jTable_Usuario.rowAtPoint(SwingUtilities.convertPoint(popupMenu, new Point(0, 0), jTable_Usuario));
                        if (rowAtPoint > -1) {
                            jTable_Usuario.setRowSelectionInterval(rowAtPoint, rowAtPoint);
                        }
                    }
                });
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                // TODO Auto-generated method stub

            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {
                // TODO Auto-generated method stub

            }
        }); // fim popupMenu.addPopupMenuListener(new PopupMenuListener()

        this.jTable_Usuario.setComponentPopupMenu(popupMenu);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Usuario = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(100, 100));
        setPreferredSize(new java.awt.Dimension(850, 600));

        jButton1.setText("voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable_Usuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Usuário"
            }
        ));
        jTable_Usuario.setMinimumSize(new java.awt.Dimension(200, 204));
        jScrollPane1.setViewportView(jTable_Usuario);
        if (jTable_Usuario.getColumnModel().getColumnCount() > 0) {
            jTable_Usuario.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable_Usuario.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Lista de Usuários");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel17)
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        telaprincipal.RetornarTelaPrincipal();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_Usuario;
    // End of variables declaration//GEN-END:variables

    private void jTable_UsuarioMudarSenha() {
        int rowSelected = this.jTable_Usuario.getSelectedRow();
        int ColumnSelected = this.jTable_Usuario.getSelectedColumn();

        int convertedRowSelected = this.jTable_Usuario.convertRowIndexToModel(this.jTable_Usuario.getSelectedRow());
        try {

            int id = Integer.parseInt(this.jTable_Usuario.getModel().getValueAt(convertedRowSelected, 0).toString());

            Usuario u = new Usuario(
                    id,
                    this.jTable_Usuario.getModel().getValueAt(convertedRowSelected, 1).toString(),
                    exibe.fazTelaGetString("Informe a senha", "Informe a senha atual")
            );
            // verificar senha atual
            if (telaprincipal.getFachada().procurarUsuario(u) != null) {
                String senha = exibe.fazTelaGetString("Informe a senha", "Informe a nova senha");
                String confirmaSenha = exibe.fazTelaGetString("Confirme a senha", "Confirme a nova senha");
                if (senha.equals(confirmaSenha) && !senha.equals("") && senha != null) {
                    telaprincipal.getFachada().AtualizarUsuarioSenha(id, senha);
                    exibe.fazTelaInformacao("Senha alterada", "Senha alterada com sucesso!");
                } else {
                    exibe.fazTelaErro("Senhas não coincidem", "As senhas informadas são diferentes!");
                }

            } else {
                exibe.fazTelaErro("Senha incorreta", "Senha incorreta!");
            };

        } catch (Exception ex) {
            exibe.fazTelaErro("Erro", "Erro ao trocar a senha do usuário!" + ex);
        }
    }

    private void JPanelUsuariosListarDeletar() {
        int rowSelected = this.jTable_Usuario.getSelectedRow();
        int ColumnSelected = this.jTable_Usuario.getSelectedColumn();

        int convertedRowSelected = this.jTable_Usuario.convertRowIndexToModel(this.jTable_Usuario.getSelectedRow());
        try {
            String[] botoes = {"cancelar", "deletar"};
            int opcao = exibe.fazTelaMenu("Aviso", "essa operação nao pode ser cancelada, deseja realmente apagar este usuario?", botoes);
            if (opcao == 0) {

            } else {
                int id = Integer.parseInt(this.jTable_Usuario.getModel().getValueAt(convertedRowSelected, 0).toString());
                telaprincipal.getFachada().ApagarUsuario(id);
                exibe.fazTelaInformacao("Usuário removido", "O usuário selecionado foi removido do sistema!");
                modeljTable_Usuario.removeRow(rowSelected);
            }

        } catch (BancoDeDadosException | NumberFormatException | SQLException ex) {
            exibe.fazTelaErro("Erro", "Erro ao remover o usuário!" + ex);
        }

    }

}
